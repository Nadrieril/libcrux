/* automatically generated by rust-bindgen 0.59.2 */

pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint32_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn Hacl_Chacha20Poly1305_32_aead_encrypt(
        k: *mut u8,
        n: *mut u8,
        aadlen: u32,
        aad: *mut u8,
        mlen: u32,
        m: *mut u8,
        cipher: *mut u8,
        mac: *mut u8,
    );
}
extern "C" {
    pub fn Hacl_Chacha20Poly1305_32_aead_decrypt(
        k: *mut u8,
        n: *mut u8,
        aadlen: u32,
        aad: *mut u8,
        mlen: u32,
        m: *mut u8,
        cipher: *mut u8,
        mac: *mut u8,
    ) -> u32;
}
extern "C" {
    #[doc = "Compute the scalar multiple of a point."]
    #[doc = ""]
    #[doc = "@param out Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where the secret/private key is read from."]
    #[doc = "@param pub Pointer to 32 bytes of memory where the public point is read from."]
    pub fn Hacl_Curve25519_51_scalarmult(out: *mut u8, priv_: *mut u8, pub_: *mut u8);
}
extern "C" {
    #[doc = "Calculate a public point from a secret/private key."]
    #[doc = ""]
    #[doc = "This computes a scalar multiplication of the secret/private key with the curve's basepoint."]
    #[doc = ""]
    #[doc = "@param pub Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where the secret/private key is read from."]
    pub fn Hacl_Curve25519_51_secret_to_public(pub_: *mut u8, priv_: *mut u8);
}
extern "C" {
    #[doc = "Execute the diffie-hellmann key exchange."]
    #[doc = ""]
    #[doc = "@param out Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where **our** secret/private key is read from."]
    #[doc = "@param pub Pointer to 32 bytes of memory where **their** public point is read from."]
    pub fn Hacl_Curve25519_51_ecdh(out: *mut u8, priv_: *mut u8, pub_: *mut u8) -> bool;
}
extern "C" {
    #[doc = "Compute the scalar multiple of a point."]
    #[doc = ""]
    #[doc = "@param out Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where the secret/private key is read from."]
    #[doc = "@param pub Pointer to 32 bytes of memory where the public point is read from."]
    pub fn Hacl_Curve25519_64_scalarmult(out: *mut u8, priv_: *mut u8, pub_: *mut u8);
}
extern "C" {
    #[doc = "Calculate a public point from a secret/private key."]
    #[doc = ""]
    #[doc = "This computes a scalar multiplication of the secret/private key with the curve's basepoint."]
    #[doc = ""]
    #[doc = "@param pub Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where the secret/private key is read from."]
    pub fn Hacl_Curve25519_64_secret_to_public(pub_: *mut u8, priv_: *mut u8);
}
extern "C" {
    #[doc = "Execute the diffie-hellmann key exchange."]
    #[doc = ""]
    #[doc = "@param out Pointer to 32 bytes of memory, allocated by the caller, where the resulting point is written to."]
    #[doc = "@param priv Pointer to 32 bytes of memory where **our** secret/private key is read from."]
    #[doc = "@param pub Pointer to 32 bytes of memory where **their** public point is read from."]
    pub fn Hacl_Curve25519_64_ecdh(out: *mut u8, priv_: *mut u8, pub_: *mut u8) -> bool;
}
