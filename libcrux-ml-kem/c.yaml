files:
  # Intrinsics, in their own separate files.
  - name: libcrux_intrinsics_neon
    library: true
    inline_static: true
    api:
      - [libcrux_intrinsics, arm64]

  - name: libcrux_intrinsics_avx2
    library: true
    inline_static: true
    api:
      - [libcrux_intrinsics, avx2]

  - name: libcrux_platform
    api:
      - [libcrux_platform, "*"]

  # Keep the per-target seperation idea: each SHA3 variant in its own file
  - name: libcrux_sha3_neon
    api:
      - [libcrux_sha3, neon, "*"]
    private:
      # When patterns is the only key of private, it is optional, and one may
      # just specify a list of patterns that are understood to match patterns
      # (not monomorphizations)
      patterns:
        - [libcrux_sha3, simd, arm64, "*"]
      monomorphizations_of:
        - [libcrux_sha3, neon, "*"]
        - [libcrux_sha3, simd, arm64, "*"]
      monomorphizations_using:
        - [libcrux_sha3, neon, "*"]
        - [libcrux_sha3, simd, arm64, "*"]
    include_in_h:
      - '"intrinsics/libcrux_intrinsics_arm64.h"'

  - name: libcrux_sha3_avx2
    api:
      - [libcrux_sha3, avx2, "*"]
    # This is needed solely for the benchmarking test -- otherwise these would
    # all be private.
    internal:
      exact:
        - [libcrux_sha3, avx2, x4, incremental, KeccakState4]
      monomorphizations_exact:
        - [libcrux_sha3, generic_keccak, absorb_final__core_core_arch_x86___m256i_4size_t_168size_t_31uint8_t ]
        - [libcrux_sha3, generic_keccak, squeeze_first_three_blocks__core_core_arch_x86___m256i_4size_t_168size_t ]
    private:
      patterns:
        - [libcrux_sha3, simd, avx2, "*"]
      monomorphizations_of:
        - [libcrux_sha3, avx2, "*"]
        - [libcrux_sha3, simd, avx2, "*"]
      monomorphizations_using:
        - [libcrux_sha3, simd, avx2, "*"]
    include_in_h:
      - '"intrinsics/libcrux_intrinsics_avx2.h"'

  - name: libcrux_mlkem_neon
    api:
      - [libcrux_ml_kem, vector, neon, "*"]
      - [libcrux_ml_kem, hash_functions, neon, "*"]
      - [libcrux_sha3, neon, "*"]
    private:
      monomorphizations_using:
        - [libcrux_ml_kem, vector, neon, "*"]
        - [libcrux_ml_kem, hash_functions, neon, "*"]
        - [libcrux_sha3, neon, "*"]
      monomorphizations_of:
        - [libcrux_ml_kem, vector, neon, "*"]
        - [libcrux_ml_kem, hash_functions, neon, "*"]
        - [libcrux_sha3, neon, "*"]

  - name: libcrux_mlkem_avx2
    api:
      - [libcrux_ml_kem, vector, avx2, "*"]
      - [libcrux_ml_kem, hash_functions, avx2, "*"]
    private:
      monomorphizations_using:
        - [libcrux_ml_kem, vector, avx2, "*"]
        - [libcrux_ml_kem, hash_functions, avx2, "*"]
      monomorphizations_of:
        - [libcrux_ml_kem, vector, avx2, "*"]
        - [libcrux_ml_kem, hash_functions, avx2, "*"]

  # Common parts of SHA3 (this catches stuff that hasn't matched above)
  - name: libcrux_sha3
    api:
      - [libcrux_sha3, "*"]
    private:
      - [libcrux_ml_kem, hash_functions, "*"]
    include_in_c:
      - '"libcrux_core.h"'

  - name: libcrux_core
    private:
      monomorphizations_of:
        - [ core, "*"]
        - [ libcrux_ml_kem, types, "*"]
        - [ libcrux_ml_kem, constant_time_ops, "*"]
      monomorphizations_using:
        - [ Eurydice, "*" ]
        - [ libcrux_ml_kem, types, "*"]
      monomorphizations_exact:
        - [ K, "__uint8_t[1536size_t]_uint8_t[1568size_t]" ]
        - [ K, "__uint8_t[1152size_t]_uint8_t[1184size_t]" ]
        - [ K, "__uint8_t[768size_t]_uint8_t[800size_t]" ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___33size_t ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___34size_t ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___64size_t ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___800size_t ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___1120size_t ]
        - [ libcrux_ml_kem, ind_cpa, into_padded_array___1600size_t ]
      patterns:
        - [ core, "*"]
        - [ libcrux_ml_kem, types ]
        - [ libcrux_ml_kem, constants ]
        - [ libcrux_ml_kem, constant_time_ops, "*"]
    api:
      - [Eurydice, "*"]

  - name: libcrux_polynomial
    private:
      patterns:
        - [ libcrux_ml_kem, polynomial, "*" ]
        - [ libcrux_ml_kem, vector, "*" ]
      monomorphizations_of:
        - [ libcrux_ml_kem, polynomial, "*" ]
        - [ libcrux_ml_kem, vector, "*" ]
      monomorphizations_using:
        - [ libcrux_ml_kem, polynomial, "*" ]
        - [ libcrux_ml_kem, vector, traits, "*" ]

  - name: libcrux_mlkem_sha3_avx2
    private:
      monomorphizations_using:
        - [libcrux_ml_kem, hash_functions, avx2, "*"]
    api:
      - [libcrux_ml_kem, hash_functions, avx2, "*"]

  - name: libcrux_mlkem512
    api:
      - [libcrux_ml_kem, mlkem512]

  - name: libcrux_mlkem768
    api:
      - [libcrux_ml_kem, mlkem768]

  - name: libcrux_mlkem1024
    api:
      - [libcrux_ml_kem, mlkem1024]

  # Just a few constants not caught by anything above. Most likely can go into
  # core or polynomial (TODO: try it).
  - name: libcrux_mlkem_common
    private:
      - [libcrux_ml_kem, "*"]
    inline_static: true
