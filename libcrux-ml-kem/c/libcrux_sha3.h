/* 
  This file was generated by KaRaMeL <https://github.com/FStarLang/karamel>
  KaRaMeL invocation: /Users/jonathan/Code/eurydice/eurydice --config ../c.yaml ../../libcrux_ml_kem.llbc ../../libcrux_sha3.llbc
  F* version: 58c915a8
  KaRaMeL version: 38d348ce
 */

#ifndef __libcrux_sha3_H
#define __libcrux_sha3_H

#if defined(__cplusplus)
extern "C" {
#endif

#include "libcrux_core.h"
#include "eurydice_glue.h"

extern const uint64_t libcrux_sha3_generic_keccak_ROUNDCONSTANTS[24U];

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___zero(void);

uint64_t
libcrux_sha3_portable_keccak__veor5q_u64(
  uint64_t a,
  uint64_t b,
  uint64_t c,
  uint64_t d,
  uint64_t e
);

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___xor5(
  uint64_t a,
  uint64_t b,
  uint64_t c,
  uint64_t d,
  uint64_t e
);

uint64_t libcrux_sha3_portable_keccak__vrax1q_u64(uint64_t a, uint64_t b);

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___rotate_left1_and_xor(
  uint64_t a,
  uint64_t b
);

uint64_t libcrux_sha3_portable_keccak__vbcaxq_u64(uint64_t a, uint64_t b, uint64_t c);

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___and_not_xor(
  uint64_t a,
  uint64_t b,
  uint64_t c
);

uint64_t libcrux_sha3_portable_keccak__veorq_n_u64(uint64_t a, uint64_t c);

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___xor_constant(
  uint64_t a,
  uint64_t c
);

uint64_t
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___xor(
  uint64_t a,
  uint64_t b
);

void
libcrux_sha3_portable_keccak_slice_1(
  Eurydice_slice a[1U],
  size_t start,
  size_t len,
  Eurydice_slice ret[1U]
);

void
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___slice_n(
  Eurydice_slice a[1U],
  size_t start,
  size_t len,
  Eurydice_slice ret[1U]
);

K___Eurydice_slice_uint8_t_1size_t__Eurydice_slice_uint8_t_1size_t_
libcrux_sha3_portable_keccak_split_at_mut_1(Eurydice_slice out[1U], size_t mid);

K___Eurydice_slice_uint8_t_1size_t__Eurydice_slice_uint8_t_1size_t_
libcrux_sha3_portable_keccak___libcrux_sha3__traits__KeccakItem_1__usize__for_u64___split_at_mut_n(
  Eurydice_slice a[1U],
  size_t mid
);

typedef struct libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t_s
{ uint64_t st[5U][5U]; }
libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t;

void libcrux_sha3_portable_sha512(Eurydice_slice digest, Eurydice_slice data);

void libcrux_sha3_portable_sha256(Eurydice_slice digest, Eurydice_slice data);

void libcrux_sha3_portable_shake256(Eurydice_slice digest, Eurydice_slice data);

typedef libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t
libcrux_sha3_portable_KeccakState1;

libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t
libcrux_sha3_portable_incremental_shake128_init(void);

void
libcrux_sha3_portable_incremental_shake128_absorb_final(
  libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t *s,
  Eurydice_slice data0
);

void
libcrux_sha3_portable_incremental_shake128_squeeze_next_block(
  libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t *s,
  Eurydice_slice out0
);

void
libcrux_sha3_portable_incremental_shake128_squeeze_first_three_blocks(
  libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t *s,
  Eurydice_slice out0
);

#define libcrux_sha3_Sha224 0
#define libcrux_sha3_Sha256 1
#define libcrux_sha3_Sha384 2
#define libcrux_sha3_Sha512 3

typedef uint8_t libcrux_sha3_Algorithm;

size_t libcrux_sha3_digest_size(libcrux_sha3_Algorithm mode);

void libcrux_sha3_portable_sha224(Eurydice_slice digest, Eurydice_slice data);

void libcrux_sha3_portable_sha384(Eurydice_slice digest, Eurydice_slice data);

void libcrux_sha3_sha224_ema(Eurydice_slice digest, Eurydice_slice payload);

void libcrux_sha3_sha224(Eurydice_slice data, uint8_t ret[28U]);

void libcrux_sha3_sha256_ema(Eurydice_slice digest, Eurydice_slice payload);

void libcrux_sha3_sha256(Eurydice_slice data, uint8_t ret[32U]);

void libcrux_sha3_sha384_ema(Eurydice_slice digest, Eurydice_slice payload);

void libcrux_sha3_sha384(Eurydice_slice data, uint8_t ret[48U]);

void libcrux_sha3_sha512_ema(Eurydice_slice digest, Eurydice_slice payload);

void libcrux_sha3_sha512(Eurydice_slice data, uint8_t ret[64U]);

void libcrux_sha3_portable_shake128(Eurydice_slice digest, Eurydice_slice data);

extern const size_t libcrux_sha3_generic_keccak__PI[24U];

extern const size_t libcrux_sha3_generic_keccak__ROTC[24U];

libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t
libcrux_sha3_portable___core__clone__Clone_for_libcrux_sha3__portable__KeccakState1___clone(
  libcrux_sha3_generic_keccak_KeccakState__uint64_t__1size_t *self
);

uint32_t
libcrux_sha3___core__convert__From_libcrux_sha3__Algorithm__for_u32__1__from(
  libcrux_sha3_Algorithm v
);

libcrux_sha3_Algorithm
libcrux_sha3___core__convert__From_u32__for_libcrux_sha3__Algorithm___from(uint32_t v);

#if defined(__cplusplus)
}
#endif

#define __libcrux_sha3_H_DEFINED
#endif
